---
layout: post
title:  "Combinando Tabelas em SQL"
date:   2023-02-09 18:42:47 -0300
categories: SQL
thumbnail: "https://static.wixstatic.com/media/710ee0_74cc7ec5ef6d456fad15ec98df780bca~mv2.jpg/v1/fill/w_2457,h_1640,al_c,q_90/710ee0_74cc7ec5ef6d456fad15ec98df780bca~mv2.webp"
excerpt: "A Arte dos JOINs"
---

O SQL √© uma linguagem poderosa, e uma de suas caracter√≠sticas mais valiosas √© a capacidade de unir tabelas para obter informa√ß√µes complexas. A opera√ß√£o JOIN √© o cora√ß√£o dessa capacidade. Vamos explorar o que s√£o JOINs, por que s√£o t√£o cruciais e como us√°-los efetivamente.

<p align="center">
  <img src="https://static.wixstatic.com/media/710ee0_74cc7ec5ef6d456fad15ec98df780bca~mv2.jpg/v1/fill/w_2457,h_1640,al_c,q_90/710ee0_74cc7ec5ef6d456fad15ec98df780bca~mv2.webp" width="500" height="300">
</p>

## Por que JOINs s√£o importantes?

Imagine ter informa√ß√µes de clientes em uma tabela e seus pedidos em outra. Para entender o comportamento de compra de um cliente, voc√™ precisaria de dados de ambas as tabelas. Aqui √© onde os JOINs entram em jogo, permitindo combinar essas tabelas de forma eficaz.

### Tipos de JOINs e seus usos:

1. INNER JOIN:

Retorna linhas quando h√° uma correspond√™ncia em ambas as tabelas.

```sql
SELECT 
  clientes.nome
  , pedidos.produto
FROM clientes
INNER JOIN pedidos ON clientes.id = pedidos.id_cliente;
```

Uso t√≠pico: Quando voc√™ s√≥ quer resultados que t√™m correspond√™ncia em ambas as tabelas.

2. LEFT JOIN (ou LEFT OUTER JOIN):

Retorna todas as linhas da tabela √† esquerda, e as correspondentes da direita. Se n√£o houver correspond√™ncia, o resultado √© `NULL` do lado direito.

```sql
SELECT 
  alunos.nome
  , notas.nota
FROM alunos
LEFT JOIN notas ON alunos.id = notas.id_aluno;
```

Uso t√≠pico: Quando voc√™ quer todos os registros de uma tabela (como todos os alunos) e qualquer correspond√™ncia da outra (como suas notas).

3. RIGHT JOIN (ou RIGHT OUTER JOIN):

O oposto do LEFT JOIN. Retorna todas as linhas da tabela √† direita e as correspondentes da esquerda.

```sql
SELECT 
  empregados.nome
  , departamentos.nome
FROM empregados
RIGHT JOIN departamentos ON empregados.id_departamento = departamentos.id;
```

Uso t√≠pico: Menos comum que o LEFT JOIN, mas √∫til quando sua consulta est√° mais orientada aos dados da tabela √† direita.

4. FULL OUTER JOIN:

Combina LEFT e RIGHT JOIN. Retorna linhas quando h√° uma correspond√™ncia em uma das tabelas.

```sql
SELECT 
  clientes.nome
  , pedidos.produto
FROM clientes
FULL OUTER JOIN pedidos ON clientes.id = pedidos.id_cliente;
```

Uso t√≠pico: Quando voc√™ quer todas as linhas de ambas as tabelas e quer ver onde h√° e onde n√£o h√° correspond√™ncias.

## Considera√ß√µes de Performance:

JOINs podem ser intensivos em termos de recursos. Para otimizar:

Use √≠ndices nas colunas que voc√™ est√° juntando.
    
Limite os resultados usando cl√°usulas WHERE sempre que poss√≠vel.
    
Evite JOINs desnecess√°rios; pergunte-se se voc√™ realmente precisa de todas as tabelas que est√° juntando.

## Conclus√£o:

Os JOINs s√£o uma ferramenta essencial no arsenal de qualquer pessoa que trabalhe com SQL. Eles permitem an√°lises mais profundas e insights mais ricos ao combinar dados de v√°rias tabelas. Como qualquer ferramenta poderosa, eles exigem pr√°tica para serem dominados, mas o investimento no aprendizado vale a pena pelo poder e flexibilidade que eles oferecem.

[Linhares015 - üßô‚Äç‚ôÇÔ∏è](https://github.com/Linhares015)