---
layout: post
title:  "Automatizando tarefas do dia a dia com scripts bash no Linux"
date:   2023-02-13 18:42:47 -0300
categories: Linux
thumbnail: "https://static.wixstatic.com/media/710ee0_1daf87f04d864c7eb74c2272f720ce63~mv2.jpg/v1/fill/w_2733,h_1640,al_c,q_90/710ee0_1daf87f04d864c7eb74c2272f720ce63~mv2.webp"
excerpt: " "
---

Um script bash √© um arquivo de texto que cont√©m uma s√©rie de comandos que podem ser executados pelo shell bash, um interpretador de comandos comum em sistemas operacionais baseados em Unix, como o Linux. 

Com esses comandos, √© poss√≠vel realizar uma ampla variedade de tarefas de automa√ß√£o, desde backups e limpeza de arquivos at√© monitoramento de recursos do sistema.

Ao criar um script bash, √© importante que ele comece com a linha `#!/bin/bash`, que indica ao sistema operacional que o arquivo deve ser interpretado pelo shell bash. Em seguida, voc√™ pode come√ßar a escrever os comandos que deseja executar. 

Esses comandos podem ser qualquer coisa que possa ser executada no terminal, incluindo comandos do sistema, comandos do pr√≥prio shell bash e at√© mesmo outros scripts bash.

Para tornar um script bash execut√°vel, √© necess√°rio torn√°-lo execut√°vel com o comando:

```bash
chmod +x nome-do-arquivo.sh 
```

Em seguida, √© s√≥ digitar:

```bash 
./nome-do-arquivo.sh
```

Um dos principais benef√≠cios dos scripts bash √© que eles podem ser usados para automatizar tarefas do dia a dia e aumentar a produtividade. Aqui est√£o alguns exemplos de como os scripts bash podem ser usados para automatizar tarefas comuns:

1. Backup de arquivos 

Um script bash pode ser usado para fazer backup de arquivos importantes automaticamente. Por exemplo, o seguinte script copia todos os arquivos em um diret√≥rio para um diret√≥rio de backup:

```bash
#!/bin/bash

cp /caminho/do/diretorio/* /caminho/do/backup/
```
2. Limpeza de arquivos antigos 

Um script bash pode ser usado para excluir automaticamente arquivos antigos em um diret√≥rio. O seguinte script excluir√° todos os arquivos em um diret√≥rio que foram modificados h√° mais de 30 dias:

```bash
#!/bin/bash 

find /caminho/do/diretorio -type f -mtime +30 -execrm {} \;
```
3. Monitoramento de espa√ßo em disco 

Um script bash pode ser usado para monitorar o espa√ßo em disco em um sistema e enviar alertas quando o espa√ßo livre estiver baixo. O seguinte script envia um e-mail de alerta quando o espa√ßo livre em disco cai abaixo de um determinado limite:

```bash
#!/bin/bash 

espaco_livre=$(df / | awk '/\// {print $4}') 

limite=500000 

if [ $espaco_livre -lt $limite ] 

then

	echo"O espa√ßo livre em disco est√° abaixo do limite de $limite bytes." | mail -s "Alerta de espa√ßo em disco" seu-email@example.com 

fi
```
   
4. Comando que atualiza os rep√≥sit√≥rios e depois atualiza o sistema:

```bash
#!/bin/bash

apt-get update && apt-get upgrade -y
```

Voc√™ pode casar esses scripts com o agendador Linux o Crontab. [Artigo sobre Crontab](http://127.0.0.1:4000/linux/2023/01/07/13.html) e assim tornar ainda mais automatizado o processo no seu Linux.

Existem muitos outros exemplos de como os scripts bash podem ser usados para automatizar tarefas, desde tarefas simples como exibir a data e hora atual at√© tarefas mais complexas, como atualizar e reiniciar servidores automaticamente. 

Com um pouco de pr√°tica, voc√™ pode criar scripts para lidar com uma ampla variedade de tarefas e economizar tempo e esfor√ßo.

Neste v√≠deo mostro mais exemplos na pr√°tica:

[![SHELL SCRIPTS](https://img.youtube.com/vi/gu7JRy1Vv-c/0.jpg)](https://youtu.be/gu7JRy1Vv-c)

[Linhares015 - üßô‚Äç‚ôÇÔ∏è](https://github.com/Linhares015)